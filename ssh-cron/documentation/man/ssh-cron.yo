gagmacrowarning(cron)

includefile(../../release.yo)

htmlbodyopt(text)(#27408B)
htmlbodyopt(bgcolor)(#FFFAF0)

gagmacrowarning(ssh-cron)
mailto(f.b.brokken@rug.nl)

DEFINEMACRO(lsoption)(3)(\
    bf(--ARG1)=tt(ARG3) (bf(-ARG2))\
)
DEFINEMACRO(laoption)(2)(\
    bf(--ARG1)=tt(ARG2)\
)
DEFINEMACRO(loption)(1)(\
    bf(--ARG1)\
)
DEFINEMACRO(soption)(1)(\
    bf(-ARG1)\
)
DEFINEMACRO(s)(0)(bf(ssh-cron))
DEFINEMACRO(S)(0)(bf(Ssh-Cron))

DELETEMACRO(tt)
DEFINEMACRO(tt)(1)(em(ARG1))


manpage(ssh-cron)(1)(_CurYrs_)(ssh-cron__CurVers_.tar.gz)
        (ssh-cron - ssh-aware cron-like daemon)

manpagename(ssh-cron)(cron-like daemon able to use ssh-connections)

manpagesynopsis()
       bf(ssh-cron) [OPTIONS] tt([crontab-file]) nl()
        [OPTIONS] - cf. section bf(OPTIONS)nl()
        [crontab-file] - file containing jobs to run.nl()

manpagedescription()

This program is in its alpha stage. 

Consider the situation where a computer every now and then must access a
remote computer to do some useful things (like running a bf(stealth)(1) file
integrity scan). In order to do that it must be allowed to make bf(ssh)(1)
connections, but since the commands are not executed by the user, but by 
bf(cron)(1), the ssh-keys which are required to access the remote systems
cannot use passwords.

Often this is an undesirable situation: if the computer running the tt(ssh)
commands gets compromised, then the remote computers are compromised as well,
since the attacker may access these remote systems using the ssh
keys which do not require pass phrases.

S() intends to solve this problem as follows:

itemization(
    it() S() is a daemon program. When the program starts it first reads and
        parses a crontab-like specification file. Unless a s() program is
        already running, the following actions are performed by the daemon's
        child program, which itself spawns a child process:
    
    it() The viable cron commands are passed to the program's child (the
       daemon), and s()'s parent process dies;

    it() Next, the daemon spawns its own child process, which executes
       em(/usr/bin/ssh-agent /bin/bash). In addition, the daemon defines
       communcation channels between the daemon and the bf(ssh-agent)(1) child
       process;

    it() The daemon then sends its child as its first command to execute the
       command bf(ssh-add)(1), and through normal user-interaction means
       (e.g., using bf(ssh-askpass)(1)) em(ssh-agent) is provided with the
       required pass phrase for the ssh key.

    it() The daemon now monitors the time, firing off the commands at their
       required moments in time. If these commands require access to a remote
       computer, then this access is granted, as em(ssh-agent) is able to
       provide the pass phrase.

    it() If an existing (default or specified using the tt(-p) option, see
        below) ipc-file is found, then the tt(crontab-file) argument is
        parsed, and the recognized commands and environment variable
        specifications are sent to the running s() program, replacing its
        currently stored commands and environment definitions.
    )

Shell control characters (like redirection symbols) in command
specifications should be escaped. E.g., tt(echo hello world \> /dev/null).

The user originally providing the passphrase may leave the system, and the
daemon continues to performs its duties. If, in the meantime, the computer is
broken into, the hacker may find the ssh keys, but will not be able to use
them to compromise another computer, as he/she doesn't have the required pass
phrases.

The above-mentioned scenario doesn't work using bf(crontab)(1) itself. E.g.,
when loading a crontab file using em(crontab), after having started
em(ssh-agent), access to the ssh keys through em(ssh-agent) is lost for the
commands fired off by em(cron) itself.

manpagesection(RETURN VALUE)

    S() returns 0 if the daemon was successfully started. Otherwise 1 is
returned. 

manpageoptions()

    Where available, single letter options are listed between parentheses
following their associated long-option variants. Single letter options require
arguments if their associated long options require arguments as well.

Many options have default values. Run tt(ssh-cron --help) for an overview of
the implemented default option values.

Most options can also be specified in a configuration file (where this is not
true it is explicitly mentioned in the overview shown below).

The configuration file ignores empty lines and all information on lines
beginning with a hash-mark (tt(#), optionally preceded by blanks and/or
tabs). In the configuration file initial hyphens of command-line options must
not be used, and optionally a colon may be appended to an option's
name. Multi-word option arguments should not be surrounded by
quotes. Examples:
            verb(
    stdout
    syslog-facility: LOCAL0
            )
    Command-line options always override configuration file options.

    itemization(
    it() laption(agent)(agent)nl()
       absolute path to the agent program (plus its argument(s)) providing the
        ssh-keys. 

    it() lsoption(config-file)(c)(path)nl()
        config file containing long option specifications.

        This option cannot be specified in the configuration file.

    it() loption(help) (soption(h))nl()
       basic usage information is written to the standard output
        stream.

        This option cannot be specified in the configuration file.

    it() lsoption(ipc-file)(p)(path)nl()
       When s() runs as a daemon, then tt(path) specifies the path of the file
        holding the daemon's shared memory ID and process ID. The ipc file
        must be available if s() is starting or connecting to a daemon process
        (the latter situation occurs with the options tt(--list, --reload),
        and tt(--terminate). S() will not start a daemon process if it detects
        an existing tt(ipc-file): it has to be removed by the user first. To
        end a daemon process use tt(ssh-cron --terminate), or send a SIGINT
        (tt(ctrl-C)) or SIGTERM signal to the process-id found in the
        tt(ipc-file). 
        
    it() loption(list) (soption(l))nl()
       list the currently defined cron-commands (the tt(crontab-file) argument
        must be omitted). This option is incompatible with (--no-daemon,
        --reload) and tt(--terminate).

        This option cannot be specified in the configuration file.

    it() lsoption(log)(L)(path)nl()
       log messages are appended to tt(path). If tt(path) does not exist, it
        is created first.
 
    it() lsoption(mailer)(m)(command)nl()
       output generated by the commands executed by s() is sent by e-mail to
        the current user. Use tt(--mailer) to redefine (or to suppress sending
        e-mail by specifying an empty mailer command: tt(--mailer "")).
 
    it() loption(no-daemon) nl()
       S() is not run as a daemon. To properly end s() if not running as a
        daemon, press the `Enter' key, enter tt(ctrl-C) or send s() a
        tt(SIGTERM) signal. This option is incompatible with ( --list,
        --reload) and tt(--terminate).

       This option cannot be specified in the configuration file.

    it() loption(reload) (soption(r))nl()
       reload the s() daemon with de cron-commands defined in the
        tt(crontab-file) argument (which must be provided). This option is
        incompatible with (--list, --no-daemon,) and tt(--terminate).

        This option cannot be specified in the configuration file.

    it() loption(stdout) (soption(s))nl() 
       In addition to using a log file and syslog messages send all messages
        to the standard output. This option is not available if s() runs as a
        daemon process.

        This option cannot be specified in the configuration file.

    it() loption(syslog)nl()
       Messages are sent to the syslog daemon when this option is specified.
        By default syslog messages are written to the tt(DAEMON) facility with
        priority tt(NOTICE).

    it() laoption(syslog-facility)(facility)nl()
       The facility that is used to write the syslog messages to. By default
        this is tt(DAEMON). For an overview of facilities and their meanings,
        see, e.g., bf(syslog)(3). With s() the facilities tt(DAEMON,
        LOCAL0, LOCAL1, LOCAL2, LOCAL3, LOCAL4, LOCAL5, LOCAL6, LOCAL7), and
        tt(USER) can be used.

    it() laoption(syslog-priority)(priority)nl()
       The priority that is used to write the syslog messages to. By default
        this is tt(NOTICE). For an overview of priorities and their meanings,
        see, e.g., bf(syslog)(3). With s() all defined priorities can
        be used. E.g., tt( EMERG, ALERT, CRIT, ERR, WARNING, NOTICE, INFO) and
        tt(DEBUG).

    it() laoption(syslog-tag)(tag)nl()
       When syslog messages are generated they can be provided with a
        em(tag), which can be used to filter s()'s syslog messages from
        the log-files. By default the tag tt(SSH-CRON) is used. 
        See also section tt(RSYSLOG FILTERING) below.

    it() loption(terminate) (soption(t))nl()
       terminate a running s() daemon program, using the daemon's process ID
        found in the ipc-file. The tt(crontab-file) argument must be
        omitted. This option is incompatible tt with (--list, --nodaemon,)
        and tt(--reload)
.
        This option cannot be specified in the configuration file.

    it() loption(verbose)nl() 
       Additional messages about s()'s mode of operation are sent to
        s()'s log facilities (specified by tt(--log, --syslog,) and/or
        tt(--stdout)). 

    it() loption(version) (soption(v))nl()
       s()'s version number is written to the standard output stream.

        This option cannot be specified in the configuration file.

    ) 
    
manpagesection(RSYSLOG FILTERING)

    When using bf(rsyslogd)(1) property based filters may be used to filter
syslog messages and write them to a file of your choice. E.g., to filter
messages starting with the syslog message tag (e.g., tt(SSH-CRON)) use
        verb(
:syslogtag, isequal, "SSH-CRON:"   /var/log/ssh-cron.log
:syslogtag, isequal, "SSH-CRON:"   ~
        )
    Note that the colon is part of the tag, but is not specified with the 
tt(syslog-tag) option.

    This causes all messages having the tt(SSH-CRON:) tag to be written on
tt(/var/log/ssh-cron.log) after which they are discarded. More extensive
filtering is also supported, see, e.g.,
tt(http://www.rsyslog.com/doc/rsyslog_conf_filter.html) and
tt(http://www.rsyslog.com/doc/property_replacer.html)

manpageseealso() 

bf(cron)(1), bf(crontab)(1), bf(crontab)(5), , bf(rsyslogd)(1), bf(ssh)(1), 
bf(ssh-add)(1), bf(ssh-agent)(1), bf(ssh-askpass)(1), bf(stealth)(1), 
bf(syslog)(3)

manpagebugs()
    Too early to say anything useful here, but as yet: none reported :-)

manpagesection(COPYRIGHT)
    This is free software, distributed under the terms of the `GNU General
Public License'. Copyright remains with the author. s() is available at
tt(http://sshcron.sourceforge.net/).

manpagesection(ORGANIZATION)
    Center for Information Technology, University of Groningen.

manpageauthor()
    Frank B. Brokken (bf(f.b.brokken@rug.nl)).




